import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation('org.testng:testng:7.4.0')

    //google
    implementation('com.google.inject:guice:5.0.1')
    //lombok
    implementation('org.projectlombok:lombok:1.18.12')
    annotationProcessor('org.projectlombok:lombok:1.18.12')
    testImplementation('org.projectlombok:lombok:1.18.12')
    testAnnotationProcessor('org.projectlombok:lombok:1.18.12')
}

tasks.withType(Test) {
    testLogging {
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

test {
    useTestNG() {
        testLogging.showStandardStreams = true
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'com.testvagrant.ekam'
            artifactId 'ekam-config'
            version '0.0.1-beta'

            from components.java

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

        }
    }

    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username System.getenv('sonatypeUsername')
                password System.getenv('sonatypePassword')
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Ekam config to manage WEB|MOBILE|API run configuration'
            name 'Ekam Config'
            url 'https://gitlab.com/testvagrant/automation-studio/ekam-studio/ekam-config'
            organization {
                name 'com.testvagrant.optimus'
                url 'https://gitlab.com/testvagrant/automation-studio/ekam-studio'
            }
            issueManagement {
                system 'GitLab'
                url 'https://gitlab.com/testvagrant/automation-studio/ekam-studio/ekam-config/issues'
            }
            licenses {
                license {
                    name 'MIT License'
                    url 'https://gitlab.com/testvagrant/automation-studio/ekam-studio/ekam-config/-/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://gitlab.com/testvagrant/automation-studio/ekam-studio/ekam-config'
                connection 'https://gitlab.com/testvagrant/automation-studio/ekam-studio/ekam-config.git'
                developerConnection 'git@gitlab.com:testvagrant/automation-studio/ekam-studio/ekam-config.git'
            }
            developers {
                developer {
                    name 'Sudarshan GS'
                }
                developer {
                    name 'Krishnanand B'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
}

task runTests(type: Test) {
    useTestNG()
}


signing {
    sign publishing.publications
}