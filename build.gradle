plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id "com.github.johnrengelman.shadow" version "5.2.0"
}

group 'com.testvagrant.ekam.commons'
version '0.0.8-beta'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    //google
    implementation('com.google.guava:guava:30.1.1-jre')
    implementation('com.google.inject:guice:5.0.1')
    implementation('com.google.code.gson:gson:2.8.7')

    // Apache commons-io
    implementation('commons-io:commons-io:20030203.000550')

    //lombok
    implementation('org.projectlombok:lombok:1.18.20')
    annotationProcessor('org.projectlombok:lombok:1.18.20')
    testImplementation('org.projectlombok:lombok:1.18.20')
    testAnnotationProcessor('org.projectlombok:lombok:1.18.20')

    // Test Framework
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.8.0-M1')
    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.8.0-M1')
    testImplementation('org.junit-pioneer:junit-pioneer:1.4.2')

    testImplementation('org.assertj:assertj-guava:3.4.0')
}

test {
    useJUnitPlatform()
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'com.testvagrant.ekam'
            artifactId 'ekam-commons'
            version '0.0.9-beta'

            from components.java

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

        }
    }

    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Ekam commons for data, file, i8 and cache management'
            name 'Ekam Common'
            url 'https://gitlab.com/testvagrant/automation-studio/ekam'
            organization {
                name 'com.testvagrant.ekam'
                url 'https://gitlab.com/testvagrant/automation-studio'
            }
            issueManagement {
                system 'GitLab'
                url 'https://gitlab.com/testvagrant/automation-studio/ekam-commons/issues'
            }
            licenses {
                license {
                    name 'MIT License'
                    url 'https://gitlab.com/testvagrant/automation-studio/ekam-studio/ekam-commons/-/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://gitlab.com/testvagrant/automation-studio/ekam-studio/ekam-commons'
                connection 'https://gitlab.com/testvagrant/automation-studio/ekam-studio/ekam-commons.git'
                developerConnection 'git@gitlab.com:testvagrant/automation-studio/ekam-studio/ekam-commons.git'
            }
            developers {
                developer {
                    name 'Sudarshan GS'
                }
                developer {
                    name 'Krishnanand B'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
}

signing {
    sign publishing.publications
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Manifest-Version': '1.0', 'Implementation-Title': 'xyz', 'Implementation-Version': version
    }
    from {
        configurations.testRuntime.collect { it.isDirectory() ? it : zipTree(it) }
    }
    into 'resources', {
        from sourceSets.test.resources
    }
    from sourceSets.test.output
}

task testJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    archiveClassifier.set("alltests")
    from sourceSets.main.output, sourceSets.test.output
    configurations = [project.configurations.testRuntimeClasspath]
}
